@model List<OnlineStore.ViewModels.ShoppingCart.CartItemViewModel>

@{
    ViewBag.Title = "Koszyk";
}

<h2 class="action-header">Koszyk</h2>

@if (!Model.Any())
{
    <hr />
    <img src="~/Content/AppImages/empty_cart.png" class="cart-photo">
    <p class="empty-cart">Twój koszyk jest pusty :(</p>
}
else
{
    <h5> Nie zwlekaj z zakupem, dodanie artykułów do koszyka nie oznacza ich rezerwacji </h5>
    <br />
    using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.First().ProductName)
                </th>
                <th></th>
                <th>
                    @Html.DisplayNameFor(model => model.First().ProductCode)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().ProductSize)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().Quantity)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().Price)
                </th>
                <th></th>
            </tr>
            @{decimal total = 0;}
            @for(int i = 0; i < Model.Count(); i++)
            {
                total += Model[i].Quantity * Model[i].Price;
                <tr>
                    @if (File.Exists(Path.Combine(Server.MapPath("~/Images"), Model[i].PhotoPath)))
                    {
                        <td>
                            <img src="~/Images/@Url.Content(Model.ElementAt(i).PhotoPath)" alt="Zdjęcie główne" class="cart-product-photo" />
                        </td>
                    }
                    else
                    {
                        <td>
                            Brak zdjęcia
                        </td>
                    }
                    <td>
                        @Html.ActionLink(Model[i].ProductName, "UserDetails", "Products", new { id = Model[i].ProductId }, null)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => modelItem[i].ProductCode)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => modelItem[i].ProductSize)
                    </td>
                    <td>
                        @Html.EditorFor(modelItem => modelItem[i].Quantity, new { htmlAttributes = new { @class = "form-control quantity-cart", min = "1" } })
                        @Html.ValidationMessageFor(modelItem => modelItem[i].Quantity, "", new { @class = "text-danger" })
                    </td>
                    <td>
                        <span class="item-price-cart">@Html.DisplayFor(modelItem => modelItem[i].Price)</span>
                    </td>
                    <td>
                        <span class="glyphicon glyphicon-remove remove-item" aria-hidden="true"></span>
                        @Ajax.ActionLink("Usuń", "DeleteItem", new { id = Model[i].CartItemId }, new AjaxOptions { HttpMethod = "POST", OnSuccess = "window.location.reload()" })
                    </td>
                </tr>
            }
        </table>

        <hr />
        <p class="total-in-cart">
            SUMA: <span id="total-prize-cart"> @total </span> zł
        </p>

        <div class="form-group cart-buttons">
            <div class="col-md-offset-2 col-md-10">
                @Html.ActionLink("Wróć do zakupów", "Index", "Products", null, new { @class = "btn btn-info custom-button" })
            </div>
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" name="order" value="Przejdź do zamówienia" class="btn btn-info custom-button" />
            </div>
        </div>

        <script>
            $(document).ready(function () {
                $(".quantity-cart").keyup(handleQuantityChange).change(handleQuantityChange);
            });

            function handleQuantityChange() {
                var totalSum = 0.0;
                $(".quantity-cart").each(function () {
                    var quantity = parseInt($(this).val());
                    if (isNaN(quantity) || quantity <= 0) {
                        totalSum = NaN;
                    } else {
                        if (!isNaN(totalSum)) {
                            var price = parseFloat($(this).closest("tr").find(".item-price-cart").html().replace(",", ".")).toFixed(2);
                            totalSum += quantity * price;
                        }
                    }
                });
                $("#total-prize-cart").html(isNaN(totalSum) ? "0.00" : totalSum.toFixed(2));
            };
        </script>
    }
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}